#lang racket

(define (print m)
  (display m)
  (display "\n"))

(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define queue (mcons front-ptr rear-ptr))
    (define (empty-queue?) (null? front-ptr))
    (define (front-queue)
      (if (empty-queue?)
          (error "FRONT called with an empty queue")
          (mcar front-ptr)))
    (define (insert-queue! item)
      (let ((new-pair (mcons item '())))
        (cond ((empty-queue?)
               (set! rear-ptr new-pair)
               (set! front-ptr new-pair)
               queue)
              (else
               (set-mcdr! rear-ptr new-pair)
               (set! rear-ptr new-pair)
               queue))))
    (define (delete-queue)
      (cond ((empty-queue?)
             (print "DELETE! called with an empty queue"))
            (else
             (set! front-ptr (mcdr front-ptr)))))
    (lambda (m)
      (cond ((eq? m 'empty-queue?) (empty-queue?))
            ((eq? m 'front-queue) (front-queue))
            ((eq? m 'insert-queue!) insert-queue!)
            ((eq? m 'delete-queue!) (delete-queue))
            (else (error "Unknown command to queue-" m))))))

(define (empty-queue? q)
  (q 'empty-queue?))
(define (front-queue q)
  (q 'front-queue))
(define (insert-queue! q item)
  ((q 'insert-queue!) item))
(define (delete-queue! q)
  (q 'delete-queue!))

(define q (make-queue))
(insert-queue! q 1)
(insert-queue! q 2)
(insert-queue! q 3)
(insert-queue! q 4)
(front-queue q)
(delete-queue! q)
(front-queue q)
(delete-queue! q)
(front-queue q)
(delete-queue! q)
(insert-queue! q 10)
(front-queue q)
(delete-queue! q)
(front-queue q)
(delete-queue! q)